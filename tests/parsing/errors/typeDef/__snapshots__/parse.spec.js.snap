// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`emptyRecord.js 1`] = `
"=====Parsetree==========================================
type nonrec record = {
  }
=====Errors=============================================

File \\"/napkinscript/tests/parsing/errors/typeDef/emptyRecord.js\\", line 1, characters 14-16:


[31m1[0m â”‚  type record = [31m{}[0m

A record needs at least one field



========================================================"
`;

exports[`typeDef.js 1`] = `
"=====Parsetree==========================================
type stack =
  | Empty 
type nonrec t = [%napkinscript.typehole ]
type nonrec state = [%napkinscript.typehole ]
=====Errors=============================================

File \\"/napkinscript/tests/parsing/errors/typeDef/typeDef.js\\", line 1, characters 14-18:


[31m1[0m â”‚  type rec stack          
                    [31m^[0m
2 â”‚    | Empty
3 â”‚  

Did you forget a \`=\` here? 


File \\"/napkinscript/tests/parsing/errors/typeDef/typeDef.js\\", line 5, characters 8-30:


3 â”‚  
4 â”‚  // missing type
[31m5[0m â”‚  type t =
6 â”‚  
7 â”‚  // missing type

Missing a type here


File \\"/napkinscript/tests/parsing/errors/typeDef/typeDef.js\\", line 8, characters 12-13:


6 â”‚  
7 â”‚  // missing type
[31m8[0m â”‚  type state =

Missing a type here



========================================================"
`;

exports[`typeParams.js 1`] = `
"=====Parsetree==========================================
type nonrec 'a node = {
  _value: 'a Js.Nullable.value }
type nonrec ('from, '_) derivedNode =
  {
  mutable value: 'to_ ;
  updateF: 'from -> 'to_ }
=====Errors=============================================

File \\"/napkinscript/tests/parsing/errors/typeDef/typeParams.js\\", line 1, characters 9-10:


[31m1[0m â”‚  type node[31m([0m'a) = {
2 â”‚    _value: Js.Nullable.value<'a>
3 â”‚  }

Type params require diamonds, example: type node<'a>


File \\"/napkinscript/tests/parsing/errors/typeDef/typeParams.js\\", line 5, characters 25-27:


3 â”‚  }
4 â”‚  
[31m5[0m â”‚  type derivedNode<'from, '[31mto[0m> = {
6 â”‚    mutable value: 'to_,
7 â”‚    updateF: 'from => 'to_,

\`to\` is a reserved keyword. Try \`to_\` or \`_to\` instead



========================================================"
`;
