// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exceptionDefinition.js 1`] = `
"exception ExitEarly 
exception ExitEarly of int 
exception ExitEarly of {
  x: int } 
exception ExitEarly of < jsExit: int   >  Js.t 
exception ExitEarly of < jsExit: int [@attr ]  >  Js.t 
exception ExitEarly of < jsExit: int [@attr ]  >  Js.t 
exception ExitEarly of < jsExit: int [@attr ] ;code: int [@attr ]  >  Js.t 
exception ExitEarly of < jsExit: int   >  Js.t 
exception ExitEarly of < jsExit: int   >  Js.t * < code: int   >  Js.t 
exception ExitEarly of < jsExit: int   >  Js.t * int * < code: int   >  Js.t 
exception ExitEarly of < jsExit: int [@attr ] ;code: int [@attr ]  >  Js.t *
  < jsExit: int [@attr ] ;code: int [@attr ]  >  Js.t 
exception ExitJsStyle of < .. >  Js.t 
exception ExitJsStyle of < code: int   ;.. >  Js.t 
exception ExitJsStyle of < code: int   ;.. >  Js.t 
exception ExitJsStyle of < code: int [@attr ]  ;.. >  Js.t 
exception ExitJsStyle of < code: int [@attr ]  ;.. >  Js.t 
exception ExitJsStyle of < code: int  ;time: int   ;.. >  Js.t 
exception ExitJsStyle of < code: int [@attr ] ;time: int [@attr ]  ;.. > 
  Js.t 
exception ExitEarly [@onConstructor ]
exception ExitEarly of int [@onConstructor ]
exception Exit = Terminate
exception Exit = Lib.Terminate
exception Exit = Ns.Lib.Terminate
exception Exit[@onConstructor ] = Terminate
exception Exit[@onConstructor ] = Lib.Terminate"
`;

exports[`externalDefinition.js 1`] = `
"external clear : t -> int -> unit = \\"clear\\"
external add_nat : nat -> int = \\"add_nat_bytecode\\" \\"add_nat_native\\"
external attachShader :
  t -> program:webGlProgram -> shader:webGlShader -> unit = \\"attachShader\\"
[@@bs.send ]
external svg : unit -> React.element = \\"svg\\"
external svg : unit -> React.element = \\"svg\\"
external createDate : unit -> unit -> date = \\"Date\\"[@@bs.new ]
let foobar = (createDate ()) ()"
`;

exports[`includeStatement.js 1`] = `
"include Belt.Array
include Belt.Array[@@onInclude ]"
`;

exports[`itemExtension.js 1`] = `
"[%%itemExtension ]
[%%item.extension ]
[%%item.extension.with.args \\"argument\\"]
[%%item.extension.with.args fun x -> f x]
[%%itemExtension ][@@attrOnExtension ]"
`;

exports[`jsFfiSugar.js 1`] = `
"include
  struct
    external setTimeout : (unit -> unit) -> unit -> float = \\"setTimeout\\"
    [@@bs.val ]
  end
include
  struct
    external timeout : (unit -> unit) -> unit -> float = \\"setTimeout\\"
    [@@bs.val ]
  end
include
  struct
    external setTimeout : (unit -> unit) -> unit -> float = \\"setTimeout\\"
    [@@bs.val ]
    external clearTimeout : float -> unit = \\"clearTimeout\\"[@@bs.val ]
  end
include
  struct
    external random : unit -> float = \\"random\\"[@@bs.val ][@@bs.scope \\"Math\\"]
  end
include
  struct
    external href : string = \\"href\\"[@@bs.val ][@@bs.scope
                                                (\\"window\\", \\"location\\")]
  end
include
  struct
    external dirname : string -> string = \\"dirname\\"[@@genType.import \\"path\\"]
  end"
`;

exports[`letBinding.js 1`] = `
"let a = 1
let a = 1[@@onFirstBinding ]
let a = 1[@@onFirstBinding ]
and b = 2[@@onSecondBinding ]
let f : type t. t foo =
  fun sideEffect ->
    ((let module M = struct exception E of t  end in
        sideEffect (); (fun x -> M.E x))
    [@ns.braces ])
let f : type t x u. (t * x * y) list = fun l -> f l"
`;

exports[`modExprExtension.js 1`] = `
"module A = [%modExprExtension ]
module B = [%mod.expr.extension ]
module C = [%mod.expr.extension.with.args \\"argument\\"]
module D = [%mod.expr.extension.with.args fun x -> f x]"
`;

exports[`modType.js 1`] = `
"module type X  = Foo
module type X  = Foo[@@attr ]"
`;

exports[`module.js 1`] = `
"module A : Map = struct let m = 2 end 
module A = struct let m = 2 end"
`;

exports[`moduleTypeExtension.js 1`] = `
"module type A  = [%modTypeExtension ]
module type B  = [%mod.type.extension ]
module type C  = [%mod.type.extension.with.args \\"argument\\"]
module type D  = [%mod.type.extension.with.args fun x -> f x]"
`;

exports[`openDescription.js 1`] = `
"open Belt
open! Belt
open Belt[@@onOpen ]
open Belt.Array
open! Belt.Array
open! Belt.Array[@@onOpen ]"
`;

exports[`recursiveModules.js 1`] = `
"module rec A:Map = struct let m = 2 end  and B:Set = struct let s = 1 end
module rec A:Map = struct let m = 2 end[@@onFirstBinding ]
 and B:Set = struct let s = 1 end[@@onSecondBinding ]
module rec A:Map = struct let m = 2 end[@@onFirstBindingOfNext ]
 and B:Set = struct let s = 1 end[@@onSecondBindingOfNext ]"
`;

exports[`standaloneAttribute.js 1`] = `
"[@@@standaloneAttribute ]
[@@@standaloneAttribute \\"with payload\\"]
[@@@standaloneAttribute fun x -> x + 1]"
`;

exports[`typeDefinition.js 1`] = `
"type nonrec t = string
type nonrec t = string[@@onStructureItem ]
module X =
  struct type nonrec t = string
         type nonrec t = string[@@onStructureItem ] end"
`;
