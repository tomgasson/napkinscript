// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exception.js 1`] = `
"module type Signature  =
  sig
    exception Exit 
    exception Exit of int 
    exception Exit of int * string 
    exception Exit of int * string 
    exception Terminate of {
      time: int ;
      status: int } 
    exception Terminate of {
      time: int ;
      status: int } 
    exception Exit [@attr ]
    exception Exit of int [@attr ]
  end"
`;

exports[`external.js 1`] = `
"module type Signature  =
  sig
    type nonrec t
    external linkProgram : t -> program:webGlProgram -> unit = \\"\\"[@@bs.send ]
    external add_nat :
      nat -> int -> int -> int = \\"add_nat_bytecode\\" \\"add_nat_native\\"
  end"
`;

exports[`include.js 1`] = `
"module type Sig  =
  sig
    include BtreeType
    include Ns.BtreeType
    include ((BtreeType)[@onModType ])[@@onInclude ]
    include BtreeType
    include ((BtreeType)[@onModType ])[@@onInclude ]
    include functor (S : SetLike) -> sig val s : S.t end
    include SetLike -> sig val s : int end
    include sig val s : string val y : int end
    include ((sig val s : string val y : int end)[@onSignature ])[@@onInclude
                                                                   ]
    include [%extension ]
    include [%extension.with.args \\"foo\\"]
    include (([%extension ])[@onExtension ])[@@onInclude ]
    include (Foo with type  t =  string)
    include (((Foo)[@onModType ]) with type  t =  string)[@@onInclude ]
    include module type of String
    include ((module type of String)[@onModtype ])[@@onInclude ]
  end"
`;

exports[`itemExtension.js 1`] = `
"module type Ext  =
  sig
    [%%item.extension ]
    [%%item.extension.with.args \\"argument\\"]
    [%%item.extension.with.args fun x -> f x]
    [%%item.extension ][@@withAttr ]
  end"
`;

exports[`let.js 1`] = `"module type Sig  = sig val x : int val y : string[@@attr ] end"`;

exports[`modDecl.js 1`] = `
"module type Signature  =
  sig
    module Tree : sig val x : int end
    module Functor : functor () -> sig val x : int end
    module Functor : Tree -> Map -> sig val x : int end
    module Functor : Foo -> Bar -> sig val x : int end
    module Functor : Foo -> Bar -> sig val x : int end[@@attr ]
    module Tree : sig val x : int end[@@attr ]
  end"
`;

exports[`modtype.js 1`] = `
"module type Signature  =
  sig
    module type Belt
    module type Belt[@@onModTypeDecl ]
    module type Belt  = sig module type Array module type List end
    module type Belt  = sig module type Array module type List end[@@onModTypeDecl
                                                                    ]
  end"
`;

exports[`open.js 1`] = `
"module type Signature  =
  sig
    open Belt
    open! Belt
    open Belt.Array
    open! Belt.Array
    open Belt[@@attr ]
    open! Belt[@@attr ]
    open Belt.List[@@attr ]
    open! Belt.List[@@attr ]
  end"
`;

exports[`recModule.js 1`] = `
"module type Signature  =
  sig
    module rec A:
      sig
        type nonrec t =
          | Leaf of string 
          | Node of ASet.t 
        val compare : t -> t -> int
      end
    and ASet: (Set.S with type  elt =  A.t)
    and BTree: (Btree.S with type  elt =  A.t)
    module rec A:
      sig
        type nonrec t =
          | Leaf of string 
          | Node of ASet.t 
        val compare : t -> t -> int
      end[@@onFirstAttr ]
    and ASet: (Set.S with type  elt =  A.t)[@@onSecondAttr ]
    module rec A: Btree[@@parsableOnNext ]
    and ASet: BSet
  end"
`;

exports[`standAloneAttribute.js 1`] = `
"module type StandaloneAttribute  =
  sig
    [@@@standaloneAttribute ]
    [@@@standaloneAttribute withPayload]
    [@@@standaloneAttribute fun x -> x]
  end"
`;

exports[`typLvlModAlias.js 1`] = `
"module type Signature  =
  sig
    module Tree = Btree
    module Tree = Ns.Btree
    module Tree = Btree[@@attr ]
    module Tree = Ns.Btree[@@attr ]
  end"
`;

exports[`typeDefinition.js 1`] = `
"module type Signature  =
  sig
    type nonrec t
    type nonrec ('a, 'b) t = ('a, 'b) node
    type nonrec t[@@attr ]
    type nonrec t = s[@@onFirst ]
    and s = string[@@onSecond ]
  end"
`;

exports[`typext.js 1`] = `
"type t +=  
  | Foo 
type Foo.Bar.t +=  
  | Foo 
type ('a,'b) t +=  
  | Foo of 'a 
type ('a,'b) Foo.Bar.t +=  
  | Foo of 'a 
type t += private  
  | Foo 
type t += private  
  | Foo 
  | Bar 
type t += private  
  | Foo 
type t += private  
  | Foo 
  | Bar 
type t +=  
  | Circle of string * int 
  | Point of {
  x: int ;
  y: int } 
type t +=  
  | Circle of string * int 
  | Point of {
  x: int ;
  y: int } 
type t +=  
  | Foo = Bar
type t +=  
  | Foo = Bar
  | Circle = Circle2
type t +=  
  | Foo = Bar
  | Circle = Geo.Circle2
type t += private  
  | Foo = Bar
type t += private  
  | Foo = Bar
  | Circle = Circle2
type t += private  
  | Foo = Bar
  | Circle = Geo.Circle2
type t +=  
  | Foo = Bar
type t +=  
  | Foo = Bar
  | Circle = Circle2
type t +=  
  | Foo = Bar
  | Circle = Geo.Circle2
type t += private  
  | Foo = Bar
type t += private  
  | Foo = Bar
  | Circle = Circle2
type t += private  
  | Foo = Bar
  | Circle = Geo.Circle2
type t +=  
  | Foo = Geo.Metry.Bar"
`;
