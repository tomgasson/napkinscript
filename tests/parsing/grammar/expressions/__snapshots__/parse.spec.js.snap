// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`apply.js 1`] = `
";;foo (fun _ -> bla) blaz
;;foo (fun _ -> bla) blaz
;;foo ((fun _ -> bla)[@bs ]) blaz
;;foo (fun _ -> bla) (fun _ -> blaz)
;;List.map (fun x -> x + 1) myList
;;List.reduce (fun acc -> fun curr -> acc + curr) 0 myList"
`;

exports[`argument.js 1`] = `
"let foo ~a  = ((a ())[@bs ]) +. 1.
let a = ((fun () -> 2)[@bs ])
let bar = foo ~a
let comparisonResult = ((compare currentNode.value ~targetValue)[@bs ])
;;((callback firstNode ~y)[@bs ])"
`;

exports[`array.js 1`] = `
"let x = [|1;2;3|]
let x = [|1;2;3|]
let x = [|(1 : int);(2 : int);(3 : int)|]"
`;

exports[`arrow.js 1`] = `
"let f x = x + 1
let f _ = Js.log \\"test\\"
let f () = Js.log \\"unit\\"
let f (Reducer (inst, comp)) = inst.render comp
let f (Instance) = ()
let f a b = a + b
let f 1 2 = ()
let f \\"stringPattern\\" = ()
let f \\"stringPattern\\" \\"stringPattern\\" = ()
let f () = ()
let f (a : int) (b : int) = a + b
let f _ _ = ()
let f [|a;b|] [|c;d|] = ((a + b) + c) + d
let f { a } = a + 1
let f { a; b } { c; d } = ((a + b) + c) + d
let f (a) = a + 1
let f (a, b) = a + b
let f (a, b) (c, d) = ((a + b) + c) + d
let f exception Terminate = ()
let f exception Terminate exception Exit = ()
let f (lazy x) = ()
let f (lazy x) (lazy y) = ()
let f [] = ()
let f (x::xs) = x + (xs |. Belt.List.length)
let f (x : int) (y : int) = x + y
let f ~a  ~b  = a + b
let f ~a:x  ~b:y  = x + y
let f ~a:(x : int)  ~b:(y : int)  = x + y
let f ?(a= 1)  ?(b= 2)  c = (a + b) + c
let f ?a:(x= 1)  ?b:(y= 2)  c = (x + y) + c
let f ?a:((x : int)= 1)  ?b:((y : int)= 2)  c = (x + y) + c
let f ?a  ?b  c =
  match (a, b) with | (Some a, Some b) -> (a + b) + c | _ -> 3
let f ?a:x  ?b:y  c =
  match (x, y) with | (Some a, Some b) -> (a + b) + c | _ -> 3
let f ?a:(x : int option)  ?b:(y : int option)  c =
  match (x, y) with | (Some a, Some b) -> (a + b) + c | _ -> 3
let f a b = a + b"
`;

exports[`block.js 1`] = `
"let b =
  let module Array = Belt.Array in
    ([|1;2|] |. (Array.map (fun x -> x + 1))) |. Js.log
let b = let open Belt.Array in ([|1;2|] |. (map (fun x -> x + 1))) |. Js.log
let b = let exception QuitEarly  in raise QuitEarly
let b = let a = 1 in let b = 2 in a + b
let b = let _ = sideEffect () in ()
let b = let _ = sideEffect () in ()
let b = a (); b (); c ()
let b = a (); b (); (let a = 1 in f a)
let b = let a = 1 in let b = 2 in ()
let b =
  let module Array = Belt.Array in
    let open Array in
      let exception Terminate of int  in
        let a = 1 in
        let b = 2 in
        sideEffect ();
        (let x = (1 + 2) |. (fun x -> x + 1) in raise (Terminate x))
let b = f (); g (); h (); (let arr = [|1;2;3|] in ())
let res =
  let a = \\"a starts out as\\" in
  (print_string a; (let a = 20 in print_int a)); print_string a
let res =
  let a = \\"first its a string\\" in
  let a = 20 in print_int a; print_int a; print_int a
let res =
  let a = \\"a is always a string\\" in
  print_string a; (let b = 30 in print_int b)
let nestedLet = let _ = 1 in ()
let nestedLet = let _ = 1 in 2
let init () = foo (1 == 1); [%assert 1 == 2]
let init () = [%assert 1 == 2]; foo (1 == 1); [%assert 1 == 2]"
`;

exports[`bracedOrRecord.js 1`] = `
"let r = { expr with pexp_attributes = [||] }
let r = { a }
let r = { a = expr }
let r = { a = expr }
let r = { a = expr; b = expr2 }
let r = { f = (fun x -> x + b) }
let e = a
let e = a
let e = a; b ()
let e = - a
let e = a + b
let e = if a then true else false
let e = if a |> computation then true else false
let e = a.(0)
let e = f b
let e = (a.b).c
let e = arr.(x) <- 20
let e x = (x + 1) |> (doStuff config)
let e = (fun x -> x + 1) |> (doStuff config)
let e = if fun x -> x + 1 then true else false
let e = (fun x -> x + 1) |> sideEffect; logToAnalytics Shady.ml
let f event = (event.target).value
let f event = ((event.target).value : string)
let x = let a = 1 in let b = 2 in a + b"
`;

exports[`bsObject.js 1`] = `
"let x = [%bs.obj { age = 30 }]
let y = [%bs.obj { age = 30 }]
let y = [%bs.obj { age = 30; name = \\"steve\\" }]
let y = [%bs.obj { age = 30; name = \\"steve\\" }]
let x = \\"age\\"
let x = \\"age\\".(0)
let x = \\"age\\" |. Js.log
let x = if \\"age\\" then true else false
let x = \\"age\\" |. Js.log; (let foo = 1 in let bar = 2 in foo + bar)
let x =
  if \\"age\\" then true else false; (let foo = 1 in let bar = 2 in foo + bar)
let x = \\"age\\".(0); (let foo = 1 in let bar = 2 in foo + bar)"
`;

exports[`constants.js 1`] = `
"let x = true
let y = false
let txt = \\"a string\\"
let txtWithEscapedChar = \\"foo\\\\nbar\\"
let number = 1
let template = \\"amazing\\\\n  multine\\\\n  template\\\\n     string\\\\n\\"
let complexNumber = 1.6"
`;

exports[`constructor.js 1`] = `
"let x = Red
let y = Colors.Blue
let z = Rgb ()
let v = Vertex (1., 2., 3., 4.)
let colour = Shades.Colors.White
let u = ()"
`;

exports[`es6template.js 1`] = `
"let s = \\"foo\\"
let s = \\"multi\\\\n  line\\\\n\\\\nstring\\\\n\\"
let s = foo
let s = \\"before\\" ^ foo
let s = \\"before \\" ^ foo
let s = \\"before  \\" ^ foo
let s = foo ^ \\"after\\"
let s = foo ^ \\" after\\"
let s = foo ^ \\"  after\\"
let s = foo ^ bar
let s = (foo ^ bar) ^ baz
let s = (foo ^ \\" \\") ^ bar
let s = (((foo ^ \\" \\") ^ bar) ^ \\" \\") ^ baz
let s = (((\\" before \\" ^ foo) ^ \\" \\") ^ bar) ^ \\" after \\"
let s = (((((\\"before \\" ^ foo) ^ \\" middle \\") ^ bar) ^ \\" \\") ^ baz) ^ \\" wow \\"
let s =
  \\"\\\\n  multiline\\\\n\\\\n  es6\\\\n\\\\n  template\\\\n\\\\n  expression\\\\n\\\\n  so convenient\\\\n\\\\n  :)\\\\n\\""
`;

exports[`extension.js 1`] = `
";;[%expr ]
;;[%expr.extension ]
;;[%expr.extension.with.args \\"argument\\"]
;;[%expr.extension.with.args fun x -> f x]
let x = ([%bs.raw \\"1\\"]) + ([%bs.raw \\"2\\"])"
`;

exports[`float.js 1`] = `
";;1. /. 2.
;;3. *. 4.
;;2. ** 2.
;;10.2 +. 5.4
;;28.9 -. 13.8"
`;

exports[`for.js 1`] = `
";;for p = 0 to 10 do () done
;;for p = 10 downto 0 do () done
;;for p = a to b do () done
;;for p = a to b do let a = 1 in let b = 2 in a + b done"
`;

exports[`forV2.js 1`] = `";;let i = ref 0 in while i < 10 do Js.log i; i := ((!i) + 1) done"`;

exports[`ident.js 1`] = `
"let x = foo
let y = Foo.Bar.x
let x = _identWithUnderscore
let x = _ident_ident
let x = _ident_ident_
let x = __ident__"
`;

exports[`if.js 1`] = `
";;if foo then true else false
;;if foo = 2 then let bar = 1 in let foo = 2 in bar + foo
let ifThenElse = if foo then lala else doStuff x y z
let ifElseIfThen =
  if foo = bar
  then f ()
  else if foo = bar2 then f1 () else if foo = bar3 then f2 () else f3 ()"
`;

exports[`infix.js 1`] = `
";;a |. (f b)
;;\\"string1\\" ^ \\"string2\\"
;;a <> b
;;a != b
;;a = b
;;a == b"
`;

exports[`jsx.js 1`] = `
"let _ = ((div ~children:[] ())[@JSX ])
let _ = ((div ~children:[] ())[@JSX ])
let _ = ((div ~className:\\"menu\\" ~children:[] ())[@JSX ])
let _ = ((div ~className:\\"menu\\" ~children:[] ())[@JSX ])
let _ = ((div ~className:\\"menu\\" ~children:[] ())[@JSX ])
let _ = ((div ~className:\\"menu\\" ~children:[] ())[@JSX ])
let _ =
  ((div ~className:\\"menu\\" ~onClick:(fun _ -> Js.log \\"click\\") ~children:[] ())
  [@JSX ])
let _ =
  ((div ~className:\\"menu\\" ~onClick:(fun _ -> Js.log \\"click\\") ~children:[] ())
  [@JSX ])
let _ = ((Navbar.createElement ~children:[] ())[@JSX ])
let _ = ((Nav.Navbar.createElement ~children:[] ())[@JSX ])
let _ = ((el ~punned ~children:[] ())[@JSX ])
let _ = ((el ?punned ~children:[] ())[@JSX ])
let _ = ((el ~punned ~children:[] ())[@JSX ])
let _ = ((el ?punned ~children:[] ())[@JSX ])
let _ = ((el ?a:b ~children:[] ())[@JSX ])
let _ = ((el ?a:b ~children:[] ())[@JSX ])
let _ = (([])[@JSX ])
let _ = (([])[@JSX ])
let _ =
  ((div ~className:\\"menu\\"
      ~children:[((div ~className:\\"submenu\\" ~children:[sub1] ())
                [@JSX ]);
                ((div ~className:\\"submenu\\" ~children:[sub2] ())
                [@JSX ])] ())
  [@JSX ])
let _ =
  ((div ~className:\\"menu\\"
      ~children:[((div ~className:\\"submenu\\" ~children:[sub1] ())
                [@JSX ]);
                ((div ~className:\\"submenu\\" ~children:[sub2] ())
                [@JSX ])] ())
  [@JSX ])
let _ = ((div ~children:child ())[@JSX ])
let _ = ((Foo.createElement ~children:(fun a -> 1) ())[@JSX ])
let _ =
  ((Foo.createElement ~children:((Foo2.createElement ~children:[] ())
      [@JSX ]) ())
  [@JSX ])
let _ = ((Foo.createElement ~children:[|a|] ())[@JSX ])
let _ = ((Foo.createElement ~children:(1, 2) ())[@JSX ])
let _ = ((Foo.createElement ~children:(1, 2) ())[@JSX ])
let _ = ((div ~children:[ident; [|1;2;3|]; call a b; (x.y).z] ())[@JSX ])
let _ =
  ((Outer.createElement ~inner:((Inner.createElement ~children:[] ())
      [@JSX ]) ~children:[] ())
  [@JSX ])
let _ = ((div ~onClick:onClickHandler ~children:[(([\\"foobar\\"])[@JSX ])] ())
  [@JSX ])
let _ =
  ((Window.createElement
      ~style:{
               width = 10;
               height = 10;
               paddingTop = 10;
               paddingLeft = 10;
               paddingRight = 10;
               paddingBottom = 10
             } ~children:[] ())
  [@JSX ])
let _ = ((OverEager.createElement ~fiber:Metal.fiber ~children:[] ())[@JSX ])
let arrayOfListOfJsx = [|(([])[@JSX ])|]
let arrayOfListOfJsx =
  [|(([((Foo.createElement ~children:[] ())[@JSX ])])[@JSX ])|]
let arrayOfListOfJsx =
  [|(([((Foo.createElement ~children:[] ())[@JSX ])])
    [@JSX ]);(([((Bar.createElement ~children:[] ())[@JSX ])])[@JSX ])|]
let sameButWithSpaces = [|(([])[@JSX ])|]
let sameButWithSpaces =
  [|(([((Foo.createElement ~children:[] ())[@JSX ])])[@JSX ])|]
let sameButWithSpaces =
  [|(([((Foo.createElement ~children:[] ())[@JSX ])])
    [@JSX ]);(([((Bar.createElement ~children:[] ())[@JSX ])])[@JSX ])|]
let sameButWithSpaces =
  [|(([((Foo.createElement ~children:[] ())[@JSX ])])
    [@JSX ]);(([((Bar.createElement ~children:[] ())[@JSX ])])[@JSX ])|]
let arrayOfJsx = [||]
let arrayOfJsx = [|((Foo.createElement ~children:[] ())[@JSX ])|]
let arrayOfJsx =
  [|((Foo.createElement ~children:[] ())
    [@JSX ]);((Bar.createElement ~children:[] ())[@JSX ])|]
let sameButWithSpaces = [||]
let sameButWithSpaces = [|((Foo.createElement ~children:[] ())[@JSX ])|]
let sameButWithSpaces =
  [|((Foo.createElement ~children:[] ())
    [@JSX ]);((Bar.createElement ~children:[] ())[@JSX ])|]
let _ = ((a ~children:[] ())[@JSX ]) < ((b ~children:[] ())[@JSX ])
let _ = ((a ~children:[] ())[@JSX ]) > ((b ~children:[] ())[@JSX ])
let _ = ((a ~children:[] ())[@JSX ]) < ((b ~children:[] ())[@JSX ])
let _ = ((a ~children:[] ())[@JSX ]) > ((b ~children:[] ())[@JSX ])
let y =
  ((Routes.createElement ~path:(Routes.stateToPath state) ~isHistorical:true
      ~onHashChange:(fun _oldPath ->
                       fun _oldUrl ->
                         fun newUrl ->
                           updater
                             (fun latestComponentBag ->
                                fun _ ->
                                  let currentActualPath =
                                    Routes.hashOfUri newUrl in
                                  let pathFromState =
                                    Routes.stateToPath
                                      latestComponentBag.state in
                                  if currentActualPath = pathFromState
                                  then None
                                  else
                                    dispatchEventless
                                      (State.UriNavigated currentActualPath)
                                      latestComponentBag ()) ()) ~children:[]
      ())
  [@JSX ])
let z =
  ((div
      ~style:(ReactDOMRe.Style.make ~width ~height ~color ~backgroundColor
                ~margin ~padding ~border ~borderColor ~someOtherAttribute ())
      ~key:(string_of_int 1) ~children:[] ())
  [@JSX ])
let omega =
  ((div
      ~aList:[width;
             height;
             color;
             backgroundColor;
             margin;
             padding;
             border;
             borderColor;
             someOtherAttribute] ~key:(string_of_int 1) ~children:[] ())
  [@JSX ])
let someArray =
  ((div
      ~anArray:[|width;height;color;backgroundColor;margin;padding;border;borderColor;someOtherAttribute|]
      ~key:(string_of_int 1) ~children:[] ())
  [@JSX ])
let tuples =
  ((div
      ~aTuple:(width, height, color, backgroundColor, margin, padding,
                border, borderColor, someOtherAttribute, definitelyBreakere)
      ~key:(string_of_int 1) ~children:[] ())
  [@JSX ])
let icon =
  ((Icon.createElement
      ~name:(match state.volume with
             | v when v < 0.1 -> \\"sound-off\\"
             | v when v < 0.11 -> \\"sound-min\\"
             | v when v < 0.51 -> \\"sound-med\\"
             | _ -> \\"sound-max\\") ~children:[] ())
  [@JSX ])
let _ =
  ((MessengerSharedPhotosAlbumViewPhotoReact.createElement
      ?ref:(if (foo ## bar) == baz
            then Some (foooooooooooooooooooooooo setRefChild)
            else None) ~key:(node ## legacy_attachment_id) ~children:[] ())
  [@JSX ])
let _ = ((Foo.createElement ~bar ~children:[] ())[@JSX ])
let _ = ((Foo.createElement ?bar ~children:[] ())[@JSX ])
let _ = ((Foo.createElement ?bar:Baz.bar ~children:[] ())[@JSX ])
let x = ((div ~children:[] ())[@JSX ])
let _ = ((div ~asd:1 ~children:[] ())[@JSX ])
;;(foo ## bar) #= ((bar ~children:[] ())[@JSX ])
;;foo #= ((bar ~children:[] ())[@JSX ])
;;foo #= ((bar ~children:[] ())[@JSX ])
let x = [|((div ~children:[] ())[@JSX ])|]
let z = ((div ~children:[] ())[@JSX ])
let z =
  (((Button.createElement ~onClick:handleStaleClick ~children:[] ())[@JSX ]),
    ((Button.createElement ~onClick:handleStaleClick ~children:[] ())
    [@JSX ]))
let y = [|((div ~children:[] ())[@JSX ]);((div ~children:[] ())[@JSX ])|]
let y =
  [|((Button.createElement ~onClick:handleStaleClick ~children:[] ())
    [@JSX ]);((Button.createElement ~onClick:handleStaleClick ~children:[] ())
    [@JSX ])|]
let _ =
  ((Description.createElement
      ~term:((Text.createElement ~text:\\"Age\\" ~children:[] ())[@JSX ])
      ~children:[child] ())
  [@JSX ])
let _ =
  ((Description.createElement
      ~term:(Text.createElement ~text:\\"Age\\" ~children:[||] ())
      ~children:[child] ())
  [@JSX ])
let _ =
  ((Description.createElement ~term:((Text.createElement ~text:\\"Age\\" ())
      [@JSX ]) ~children:[child] ())
  [@JSX ])
let _ =
  ((Description.createElement
      ~term:((Text.createElement ~superLongPunnedProp
                ~anotherSuperLongOneCrazyLongThingHere ~text:\\"Age\\"
                ~children:[] ())[@JSX ]) ~children:[child] ())
  [@JSX ])
let _ =
  ((Foo.createElement
      ~bar:((Baz.createElement ~superLongPunnedProp
               ~anotherSuperLongOneCrazyLongThingHere ~children:[] ())
      [@JSX ]) ~children:[] ())
  [@JSX ])
let _ = ((div ~children:[((span ~children:[str \\"hello\\"] ())[@JSX ])] ())
  [@JSX ])
let _ =
  ((description ~term:((text ~text:\\"Age\\" ~children:[] ())[@JSX ])
      ~children:[child] ())
  [@JSX ])
let _ =
  ((description ~term:(text ~text:\\"Age\\" ~children:[||] ()) ~children:
      [child] ())
  [@JSX ])
let _ =
  ((description ~term:((text ~text:\\"Age\\" ~children:[||])[@JSX ])
      ~children:[child] ())
  [@JSX ])
let _ =
  ((description ~term:((text ~text:\\"Age\\" ())[@JSX ]) ~children:[child] ())
  [@JSX ])
let _ =
  ((description
      ~term:((div ~superLongPunnedProp ~anotherSuperLongOneCrazyLongThingHere
                ~text:\\"Age\\" ~children:[] ())[@JSX ]) ~children:[child] ())
  [@JSX ])
let _ = ((div ~onClick:(fun event -> handleChange event) ~children:[] ())
  [@JSX ])
let _ =
  ((div ~onClick:(fun eventWithLongIdent -> handleChange eventWithLongIdent)
      ~children:[] ())
  [@JSX ])
let _ =
  ((div ~onClick:(fun event -> Js.log event; handleChange event) ~children:[]
      ())
  [@JSX ])
let _ =
  ((StaticDiv.createElement
      ~onClick:(fun foo ->
                  fun bar ->
                    fun baz ->
                      fun lineBreak ->
                        fun identifier ->
                          doStuff foo bar baz; bar lineBreak identifier)
      ~children:[] ())
  [@JSX ])
let _ =
  ((AttrDiv.createElement ~onClick:((fun event -> handleChange event)
      [@bar ]) ~children:[] ())
  [@JSX ])
let _ =
  ((AttrDiv.createElement
      ~onClick:((fun eventLongIdentifier -> handleChange eventLongIdentifier)
      [@bar ]) ~children:[] ())
  [@JSX ])
let _ =
  ((StaticDivNamed.createElement
      ~onClick:(fun ~foo ->
                  fun ~bar ->
                    fun ~baz ->
                      fun ~lineBreak ->
                        fun ~identifier -> fun () -> bar lineBreak identifier)
      ~children:[] ())
  [@JSX ])
let _ =
  ((div ~onClick:(fun e -> (doStuff (); bar foo : event)) ~children:[] ())
  [@JSX ])
let _ =
  ((div ~onClick:(fun e -> fun e2 -> (doStuff (); bar foo : event))
      ~children:[] ())
  [@JSX ])
let _ =
  ((div
      ~onClick:(fun foo ->
                  fun bar ->
                    fun baz ->
                      fun superLongIdent ->
                        fun breakLine ->
                          (doStuff (); bar foo : (event * event2 * event3 *
                                                   event4 * event5)))
      ~children:[] ())
  [@JSX ])
let _ =
  ((div
      ~onClick:(fun foo ->
                  fun bar ->
                    fun baz ->
                      fun superLongIdent ->
                        fun breakLine ->
                          (doStuff () : (event * event2 * event3 * event4 *
                                          event5))) ~children:[] ())
  [@JSX ])
let _ =
  ((div
      ~children:[(match color with
                  | Black -> ReasonReact.string \\"black\\"
                  | Red -> ReasonReact.string \\"red\\")] ())
  [@JSX ])
let _ =
  ((div
      ~style:((ReactDOMRe.Style.make ~width:\\"20px\\" ~height:\\"20px\\"
                 ~borderRadius:\\"100%\\" ~backgroundColor:\\"red\\")[@foo ])
      ~children:[] ())
  [@JSX ])
let _ =
  ((Animated.createElement ~initialValue:0.0 ~value
      ~children:(ReactDOMRe.Style.make ~width:\\"20px\\" ~height:\\"20px\\"
                   ~borderRadius:\\"100%\\" ~backgroundColor:\\"red\\") ())
  [@JSX ])
let _ =
  ((Animated.createElement ~initialValue:0.0 ~value
      ~children:(fun value ->
                   ((div
                       ~style:(ReactDOMRe.Style.make ~width:\\"20px\\"
                                 ~height:\\"20px\\" ~borderRadius:\\"100%\\"
                                 ~backgroundColor:\\"red\\") ~children:[] ())
                   [@JSX ])) ())
  [@JSX ])
let _ =
  ((Animated.createElement ~initialValue:0.0 ~value
      ~children:(fun value ->
                   (((div
                        ~style:(ReactDOMRe.Style.make ~width:\\"20px\\"
                                  ~height:\\"20px\\" ~borderRadius:\\"100%\\"
                                  ~backgroundColor:\\"red\\") ~children:[] ())
                   [@JSX ]) : ReasonReact.element)) ())
  [@JSX ])
let _ =
  ((Animated.createElement ~initialValue:0.0 ~value
      ~children:((fun value ->
                    ((div
                        ~style:(ReactDOMRe.Style.make ~width:\\"20px\\"
                                  ~height:\\"20px\\" ~borderRadius:\\"100%\\"
                                  ~backgroundColor:\\"red\\") ~children:[] ())
                    [@JSX ]))[@foo ]) ())
  [@JSX ])
let _ =
  ((Animated.createElement ~initialValue:0.0 ~value
      ~children:(fun value ->
                   let width = \\"20px\\" in
                   let height = \\"20px\\" in
                   ((div
                       ~style:(ReactDOMRe.Style.make ~width ~height
                                 ~borderRadius:\\"100%\\" ~backgroundColor:\\"red\\")
                       ~children:[] ())
                     [@JSX ])) ())
  [@JSX ])
let _ = ((div ~callback:(reduce (fun () -> not state)) ~children:[] ())
  [@JSX ])
let _ =
  ((button ?id ~className:(Cn.make [|\\"button\\";\\"is-fullwidth\\"|]) ~onClick
      ~children:[\\"Submit\\" |> ste] ())
  [@JSX ])
let _ =
  ((button ?id ~className:(Cn.make [\\"button\\"; \\"is-fullwidth\\"]) ~onClick
      ~children:[\\"Submit\\" |> ste] ())
  [@JSX ])
let _ =
  ((button ?id ~className:(Cn.make (\\"button\\", \\"is-fullwidth\\")) ~onClick
      ~children:[\\"Submit\\" |> ste] ())
  [@JSX ])
let _ =
  ((button ?id ~className:(Cn.make { a = b }) ~onClick
      ~children:[\\"Submit\\" |> ste] ())
  [@JSX ])
let _ =
  ((X.createElement ~y:(z |. (Belt.Option.getWithDefault \\"\\")) ~children:[] ())
  [@JSX ])
let _ =
  ((div ~style:(getStyle ()) ~children:[ReasonReact.string \\"BugTest\\"] ())
  [@JSX ])
let _ =
  ((div
      ~children:[(let left = limit |. Int.toString in
                  (left ^ \\" characters left\\") |. React.string)] ())
  [@JSX ])
let _ =
  ((View.createElement ~style:(styles ## backgroundImageWrapper)
      ~children:[(let uri = \\"/images/header-background.png\\" in
                  ((Image.createElement ~resizeMode:Contain
                      ~style:(styles ## backgroundImage) ~uri ~children:[] ())
                    [@JSX ]))] ())
  [@JSX ])"
`;

exports[`list.js 1`] = `
"let x = []
let x = [1; 2; 3]
let x = [1; 2; 3]
let x = [(1 : int); (2 : int); (3 : int)]
let x = 4 :: 5 :: y
let x = 1 :: 2 :: (y : int list)"
`;

exports[`parenthesized.js 1`] = `
"let x = 1
let f = 1.3
let truth = true
let truth = false
let constructor = None
let longidentConstructor = Option.None
let txt = \\"a string\\"
let otherTxt = \\"foo bar \\" ^ txt
let ident = myIdent
let aList = [1; 2]
let anArray = [|1;2|]
let aTuple = (1, 2)
let aRecord = { name = \\"steve\\"; age = 30 }
let blockExpression = let a = 1 in let b = 2 in a + b
let assertSmthing = assert true
let lazyThing = lazy true
let jsx = ((div ~className:\\"cx\\" ~children:[foo] ())[@JSX ])
let ifExpr = if true then Js.log true else Js.log false
let forExpr = for p = 0 to 10 do () done
let whileExpr = while true do doSomeImperativeThing () done
let switchExpr = match myVar with | Blue -> \\"blue\\" | Red -> \\"red\\"
let constrainedExpr = (x : int)"
`;

exports[`primary.js 1`] = `
"let x = a.b
let x = (a.b).c
let x = H20.Water.water.h
let x = p.Parser.token
let x = (p.Lang.Parser.token).pos
;;lexbuf.lnum <- (lexbuf.lnum + 1)
;;(parser.lexbuf).lnum <- ((parser.lexbuf).lnum + 1)
let x = arr.(0)
let x = arr.((x : int))
let x = (arr.(0)).(1)
let x = (arr.((x : int))).((y : int))
;;arr.(0) <- (a + b)
;;f ()
;;(f ()) ()
;;f a
;;(f a) a
;;f a
;;f (x : int)
;;f a b c
;;f a b c
;;f ~a ~b:bArg ?c ?d:expr
;;((f ~a ~b:bArg ?c ?d:expr) ~a ~b:bArg ?c ?d:expr) ~a ~b:bArg ?c ?d:expr
;;f ~a:(x : int) ?b:(y : int)
;;connection ## platformId
;;((connection ## left) ## account) ## accountName
;;(john ## age) #= 99
;;((john ## son) ## age) #= ((steve ## age) - 5)"
`;

exports[`record.js 1`] = `
"let r = { a = expr }
let r = { a = expr }
let r = { Parsetree.pexp_attributes = [||]; Parsetree.loc = loc }
let r = { a; b; c }
let r = { Parsetree.pexp_attributes; Parsetree.loc }
let r = { Parsetree.pexp_attributes; Parsetree.loc }
let r = { a = (expr : int); b = (x : string) }
let r = { expr with pexp_attributes = [||] }
let r = { expr with pexp_attributes = [||]; pexp_loc = loc }
let r = { expr with pexp_attributes = [||] }
let r = { (make () : myRecord) with foo = bar }
let r = { (make () : myRecord) with foo = bar }"
`;

exports[`switch.js 1`] = `
";;match x with | A -> () | B -> ()
;;match a + b with | _ -> ()
;;match a + b with | _ -> ()
;;match (a, b) with | (Some a, Some b) -> (a + b) + c | _ -> 3"
`;

exports[`tuple.js 1`] = `
"let x = (1, 2, 3)
let x = (1, 2, 3)
let x = ((1 : int), (2 : int), (3 : int))"
`;

exports[`unary.js 1`] = `
"let x = not true
let m = (-1)
let m = (-2.5)
let x = 5
let x = 5.4
let x = !box
let sum = (- a) - (- b)"
`;

exports[`uncurried.js 1`] = `
"let f = ((fun a -> fun b -> a + b)[@bs ])
let f = ((fun a -> ((fun b -> a + b)[@bs ]))[@bs ])
let f = ((fun a -> fun b -> ((fun c -> fun d -> ((a + b) + c) + d)[@bs ]))
  [@bs ])
let f =
  ((fun a -> ((fun b -> ((fun c -> ((fun d -> ())[@attr4 ]))[@bs ][@attr3 ]))
      [@attr2 ]))
  [@bs ][@attr ])
let f =
  ((fun a -> ((fun b -> ((fun c -> ((fun d -> ())[@attr4 ]))[@bs ][@attr3 ]))
      [@attr2 ]))
  [@bs ][@attr ])
let f =
  ((fun ((a)[@attr ]) ->
      fun ((b)[@attr2 ]) -> ((fun ((c)[@attr3 ]) -> fun ((d)[@attr4 ]) -> ())
        [@bs ]))
  [@bs ])
;;((add 1 2)[@bs ])
;;((((((add 2 3 4)[@bs ]) 5 6 7)[@bs ]) 8 9 10)[@bs ])"
`;

exports[`underscoreApply.js 1`] = `
"let l =
  ([1; 2; 3] |. (fun __x -> List.map (fun i -> i + 1) __x)) |.
    (fun __x -> List.filter (fun i -> i > 0) __x)
let l = (fun i -> i + 1) |. (fun __x -> List.map __x [|1;2;3|])
let x __x = List.length __x
let nested x __x = List.length __x
let incr ~v  = v + 1
let l1 = ([1; 2; 3] |> (List.map (fun __x -> incr ~v:__x))) |> List.length
let l2 = ([1; 2; 3] |> (List.map (fun __x -> incr ~v:__x))) |> List.length
let optParam ?v  () = if v = None then 0 else 1
let l1 =
  ([Some 1; None; Some 2] |> (List.map (fun __x -> optParam ?v:__x ()))) |>
    List.length
let l2 =
  ([Some 1; None; Some 2] |> (List.map (fun __x -> optParam ?v:__x ()))) |>
    List.length"
`;

exports[`while.js 1`] = `
";;while not eofReached do
    let a = 1 in let b = 2 in Lexbuf.next (); (a + b) |. Js.log done
;;while (not (isLineEnding buf)) && true do foo (); next () done"
`;
