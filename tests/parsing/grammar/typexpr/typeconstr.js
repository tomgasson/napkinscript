type t = string
type t = Parser.t
type t = Lang.Parser.t
type t = option<string>
type t = option<string,>
type t = Option.t<string>
type t = Option.t<string,>
type t = Mod.Sub.t<a, b, c>
type t = Mod.Sub.t<a, b, c,>
type t = list
type t = list<string>
type t = list<{. "age": int}>
type t = list<{. "age": int}, {. "name": string}>
type t = {.} // Note: this compiles to bucklescript
type t = {..} // Note: this compiles to bucklescript

let t: string = x 
let t: Parser.t = x
let t: Lang.Parser.t = x
let t: option<string> = x
let t: option<string,> = x
let t: Option.t<string> = x
let t: Option.t<string,> = x
let t: Mod.Sub.t<a, b, c> = x
let t: Mod.Sub.t<a, b, c,> = x
let t: list = x
let t: list<string> = x
let t: list<{. "age": int}> = x
let t: list<{. "age": int}, {. "name": string}> = x
let t: list<{. }> = x // Note: this compiles to bucklescript
let t: list<{..}> = x // Note: this compiles to bucklescript

// >= isn't an infix op
let t: list<string>= x
