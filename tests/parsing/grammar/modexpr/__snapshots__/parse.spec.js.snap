// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`apply.js 1`] = `
"module X = (F)(A)
module X = (((F)(Arg1))(Arg2))(Arg3)
module X = (((F)(Arg1))(Arg2))(Arg3)
module X =
  (((((((F)[@ident ]))(((Arg1)[@attr ])))(((Arg2)[@attr2 ])))(((Arg3)
  [@attr3 ])))[@apply ])
module X = (((F)(Arg1))(Arg2))(Arg3)
module X = (F)(struct  end)
module X = ((F)(struct  end))(struct  end)
module X = (F)((A : SetLike))
module X = ((F)((A : SetLike)))((B : TreeLike))
module X = ((F)((A : SetLike)))((B : TreeLike))"
`;

exports[`constrained.js 1`] = `
"module X : MyMod = A 
include (X : MyMod)"
`;

exports[`firstClassModules.js 1`] = `
"module Device = (val
  (let deviceName = parseCmdline () in
   try Hashtbl.find devices deviceName with | Not_found -> exit 2 : (module
                                                                    Device)))
let draw_using_device device_name picture =
  let module Device = (val
    (Hashtbl.find devices device_name : (module DEVICE))) in
    Device.draw picture
module New_three = (val (three : (module X_int)))
let to_int m = let module M = (val (m : (module X_int))) in M.x"
`;

exports[`functor.js 1`] = `
"module F(A:X)(B:Y) = A
module F(A:X)(B:Y) = A
module F = ((functor (A : X) -> ((functor (B : Y) -> A)[@attr2 ]))[@attr1 ])
include functor (X : Map) -> functor (Y : Set) -> Z
include functor (X : Map) -> functor (Y : Set) -> Z
module F = ((functor (A : X) -> functor (B : Y) -> A)[@functorAttr ])
include ((functor (X : Map) -> functor (Y : Set) -> Z)[@functorAttr ])
include ((functor (X : Map) -> ((functor (Y : Set) ->
  Z)[@attr3 ]))[@functorAttr2 ][@functorAttr ])
module Make(A:X)(B:Y) : Set = struct let a = A.a + B.b end 
module Make = ((functor (A : X) -> functor (B : Y) ->
  (struct let a = A.a + B.b end : Set))[@functorAttr ])
module F() = Map
module F = ((functor () -> Map)[@functorAttr ])
include functor () -> Map
include ((functor () -> Map)[@functorAttr ])
module Make(Cmp:sig type nonrec t val eq : t -> t -> bool end) :
  sig
    type nonrec key = Cmp.t
    type nonrec coll
    val empty : coll
    val add : coll -> key -> coll
  end =
  struct
    open Cmp
    type nonrec key = t
    type nonrec coll = key list
    let empty = []
    let add (y : coll) (e : key) =
      if List.exists (fun x -> eq x e) y then y else e :: y
  end "
`;

exports[`ident.js 1`] = `
"module A = Array
module A = Belt.Array
include Array
include Belt.Array
module A = ((Array)[@attr ])
module A = ((Belt.Array)[@attr ])
include ((Array)[@attr ])
include ((Belt.Array)[@attr ])"
`;

exports[`parenthesized.js 1`] = `
"module A = ParenthesizedModule
module A = DoubleParenthesizedModule
module A = ((ParenthesizedModule)[@attr ])
module F(A:X) = A
module A = struct let a = 1 end
module A = (ModApply)(MyMod)
module A : X = A 
include ParenthesizedModule
include ((ParenthesizedModule)[@attr ])
module A = ((ParenthesizedModule)[@attr2 ][@attr ])"
`;

exports[`structure.js 1`] = `
"module X = struct let a = 1 end
include struct let b = 2 end"
`;
