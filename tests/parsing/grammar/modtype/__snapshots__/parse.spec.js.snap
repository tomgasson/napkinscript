// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`extension.js 1`] = `
"module type T  = [%ext ]
module type T  = [%ext.with.args \\"argument\\"]
module type T  = (([%ext ])[@attr ])
"
`;

exports[`functor.js 1`] = `
"module type Functor  = SetLike -> Set
module type Functor  =
  functor (S : SetLike) -> functor (B : BtreeLike) -> NeoTree
module type Functor  = SetLike -> BtreeLike -> NeoTree
module type Functor  = SetLike -> BtreeLike -> NeoTree
module type Functor  = SetLike -> BtreeLike -> NeoTree
module type Functor  =
  ((SetLike -> ((BtreeLike -> NeoTree)[@attr2 ]))[@attr1 ])
module type Functor  =
  ((SetLike -> ((BtreeLike -> NeoTree)[@attr2 ]))[@attr1 ][@attr0 ])
module type Functor  =
  ((SetLike -> ((BtreeLike -> ((NeoTree)[@attr3 ]))[@attr2 ]))[@attr1 ])
module type Functor  =
  ((SetLike -> ((BtreeLike -> ((NeoTree)[@attr3 ]))[@attr2 ]))[@attr1 ])
module type Functor  = (SetLike -> Set with type  t =  A.t)
module type Functor  = SetLike -> (Set with type  t =  A.t)
"
`;

exports[`ident.js 1`] = `
"module type BT  = BTree
module type BT  = MultiCore.BTree
module type BT  = Std.MultiCore.BTree
module type BT  = ((BTree)[@attr ])
module type BT  = ((MultiCore.BTree)[@attr ][@attr2 ])
module type BT  = ((Std.MultiCore.BTree)[@attr ][@attr2 ][@attr3 ])
"
`;

exports[`parenthesized.js 1`] = `
"module type Bt  = Btree
module type Bt  = Std.Btree
module type Bt  = ((Btree)[@attrIdent ][@attrParens ])
module type MyHash  =
  sig
    include module type of struct include Hashtbl end
    val replace : ('a, 'b) t -> 'a -> 'b -> unit
  end
module type MyHash  =
  sig
    include
      ((module type of struct include Hashtbl end)[@onModTypeOf ][@onParens ])
    val replace : ('a, 'b) t -> 'a -> 'b -> unit
  end
"
`;

exports[`signature.js 1`] = `
"module type BT  = sig val x : int end
module type BT  = sig val x : int val y : int end
module type BT  = ((sig val x : int end)[@attr ])
module type BT  = ((sig val x : int val y : int end)[@attr1 ][@attr2 ])
"
`;

exports[`typeof.js 1`] = `
"module type MyHash  =
  sig
    include module type of struct include Hashtbl end
    val replace : ('a, 'b) t -> 'a -> 'b -> unit
  end
module type MyHash  =
  sig
    include ((module type of struct include Hashtbl end)[@onModuleTypeOf ])
    val replace : ('a, 'b) t -> 'a -> 'b -> unit
  end
"
`;

exports[`with.js 1`] = `
"module type A  = (Foo with type  t =  string)
module type A  = (Foo with type  Bar.t =  string)
module type A  = (Foo with type 'a t =  string)
module type A  = (Foo with type ('a,'b) t =  string)
module type A  = (Foo with type  t =  'st constraint 'st = int)
module type A  =
  (Foo with type  t =  'st constraint 'st = int constraint 'x = int)
module type A  =
  (Foo with type  t =  'st constraint 'st = int constraint 'x = int and type
     t =  'st constraint 'st = int constraint 'x = int and type  t = 
    'st constraint 'st = int constraint 'x = int)
module type A  = (Foo with type  t :=  string)
module type A  = (Foo with type 'a t :=  string)
module type A  = (Foo with type ('a,'b) t :=  string)
module type A  = (Foo with type ('a,'b) Bar.t :=  string)
module type A  =
  (Foo with type ('a,'b) Bar.t :=  string and type ('a,'b) Bar.t :=  
    string and type ('a,'b) Bar.t :=  string)
module type A  = (Foo with module Bar = Array)
module type A  = (Foo with module Bar = Belt.Array)
module type A  = (Foo with module X.Bar = Belt.Array)
module type A  =
  (Foo with module X.Bar = Belt.Array and module X.Bar = Belt.Array and
    module X.Bar = Belt.Array)
module type A  = (Foo with module Bar := Array)
module type A  = (Foo with module Bar := Belt.Array)
module type A  =
  (Foo with module X.Bar := Belt.Array and module X.Bar := Belt.Array and
    module X.Bar := Belt.Array)
module type Printable  =
  sig type nonrec t val print : Format.formatter -> t -> unit end
module type Comparable  = sig type nonrec t val compare : t -> t -> int end
module type PrintableComparable  =
  sig include Printable include (Comparable with type  t :=  t) end
"
`;
