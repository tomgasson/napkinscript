// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`constructorDeclaration.js 1`] = `
"type nonrec t =
  | Rgb 
type nonrec t =
  | Rgb 
type nonrec t =
  | White of grayscale 
  | Black of grayscale 
  | Rgb of int * int * int 
  | Rgba of int * int * int * int 
type nonrec t =
  | Rgb of {
  r: int ;
  g: int ;
  b: int } 
  | Rgba of {
  r: int ;
  g: int ;
  b: int ;
  a: int } 
type nonrec t =
  | Rgb: t 
type nonrec t =
  | Rgb: t 
type nonrec t =
  | White: grayscale -> t 
  | Black: grayscale -> t 
  | Rgb: int * int * int -> t 
  | Rgba: int * int * int * int -> t 
type nonrec t =
  | Rgb: {
  r: int ;
  g: int ;
  b: int } -> t 
  | Rgba: {
  r: int ;
  g: int ;
  b: int ;
  a: int } -> t 
type nonrec t =
  | EmptyColor [@attr ]
  | White: grayscale -> ((t)[@onGadt ]) [@onConstr ]
"
`;

exports[`recordDeclaration.js 1`] = `
"type nonrec t = {
  x: int }
type nonrec t = {
  mutable x: int }
type nonrec t = {
  x: int }
type nonrec t = {
  mutable x: int }
type nonrec t = {
  x: int ;
  y: int }
type nonrec t = {
  mutable x: int ;
  mutable y: int }
type nonrec t = {
  x: int ;
  y: int }
type nonrec t = {
  mutable x: int ;
  mutable y: int }
type nonrec t = {
  x: 'a 'b . polyType }
type nonrec t = {
  x: int [@attr ];
  y: int [@attr2 ]}
type nonrec t =
  {
  x: ((int)[@onInt ]) [@rowAttr ];
  y: ((int)[@onInt ]) [@rowAttr2 ]}
type nonrec t = {
  form: form }
type nonrec t = {
  mutable form: form }
type nonrec t = {
  form: form ;
  answers: answers }
type nonrec t = {
  mutable form: form ;
  mutable answers: answers }
"
`;

exports[`typeConstraint.js 1`] = `
"type nonrec t = x constraint 'x = int
type nonrec t = x constraint 'x = string constraint 'y = unit
type nonrec t = x constraint 'a = ((typExpr)[@attr ])
"
`;

exports[`typeDefinition.js 1`] = `
"type nonrec t = string
type nonrec t = string
and s = int
type nonrec t = string
and s = int
and u = float
type t = t node
type t = string
and s = int
type t = string
and s = int
and u = float
"
`;

exports[`typeInformation.js 1`] = `
"type nonrec t
type nonrec t = Module.t
type nonrec t = Module.t constraint 'a = int
type nonrec t = Module.t constraint 'a = int constraint 'b = string
type nonrec t = {
  a: int }
type nonrec t = {
  a: int } constraint 'a = int
type nonrec t = {
  a: int } constraint 'a = int constraint 'b = string
type nonrec t = Module.t = {
  a: int }
type nonrec t = Module.t = {
  a: int } constraint 'a = int
type nonrec t = Module.t =
  {
  a: int } constraint 'a = int constraint 'b = string
type nonrec t = node
type nonrec t = node constraint 'a = int
type nonrec t = node constraint 'a = int constraint 'b = string
type nonrec t = node = {
  a: int }
type nonrec t = node = {
  a: int } constraint 'a = int
type nonrec t = node = {
  a: int } constraint 'a = int constraint 'b = string
type nonrec t =
  | Red 
type nonrec t =
  | Red  constraint 'a = string
type nonrec t =
  | Red  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
  | Blue 
type nonrec t =
  | Red 
  | Blue  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
type nonrec t =
  | Red  constraint 'a = string
type nonrec t =
  | Red  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
  | Blue 
type nonrec t =
  | Red 
  | Blue  constraint 'a = string constraint 'b = int
type nonrec t = ..
type nonrec t =
  | Red 
type nonrec t =
  | Red  constraint 'a = string
type nonrec t =
  | Red  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
  | Blue 
type nonrec t =
  | Red 
  | Blue  constraint 'a = string constraint 'b = int
type nonrec t = private
  | Green 
type nonrec t = private
  | Green  constraint 'a = unit
type nonrec t = private
  | Green  constraint 'a = unit constraint 'b = unit
type nonrec t = {
  x: int ;
  y: int }
"
`;

exports[`typeRepresentation.js 1`] = `
"type nonrec t = ..
type nonrec t = private ..
type nonrec t =
  | Blue 
type nonrec t =
  | Blue 
type nonrec t =
  | Blue 
  | Red 
type nonrec t =
  | Blue 
  | Red 
type nonrec t =
  | Blue 
  | Red 
  | Green 
type nonrec t =
  | Blue 
  | Red 
  | Green 
type nonrec t = private
  | Blue 
type nonrec t = private
  | Blue 
type nonrec t = private
  | Blue 
  | Red 
type nonrec t = private
  | Blue 
  | Red 
type nonrec t = private
  | Blue 
  | Red 
  | Green 
type nonrec t = private
  | Blue 
  | Red 
  | Green 
type nonrec t = {
  x: int ;
  y: int }
type nonrec t = private {
  x: int ;
  y: int }
"
`;

exports[`typedef.js 1`] = `
"type nonrec t
type nonrec t
and s
type nonrec 'a t
type nonrec 'a t
and 'a s
type nonrec ('a, 'b) t
and ('a, 'b) s
type nonrec 'a t = 'a node
and 'b s = 'b edge
"
`;

exports[`typeparams.js 1`] = `
"type nonrec 'a t
type nonrec ('a, 'b) t
type nonrec ('a, 'b, 'c) t
type nonrec (+'a, -'b, +_, -_) t
type nonrec _ t
"
`;
