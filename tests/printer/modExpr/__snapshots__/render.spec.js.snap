// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`apply.js 1`] = `
"module X = F(A)
module X = F(Arg1, Arg2, Arg3)

module X = F(A: SetLike)
module X = F(A: SetLike, B: TreeLike)
module X = F(
  A: SetLike,
  B: TreeLike,
  C: BtreeLike,
  D: RedBlackTreeLike,
  E: AvlTreeLike,
)

module X = F()
module X = F((), ())

module S0 = Make({
  type t = int
  let eq = (x, y) => x == y
})

module S1 = Make({
  type t = int
  let eq = (x, y) => x * x == y * y
})

"
`;

exports[`extension.js 1`] = `
"module React = %import(\\"react\\")

"
`;

exports[`functor.js 1`] = `
"module F = (A: X, B: Y) => A
module F = (@attr1 A: X, @attr2 B: Y) => A
include (X: Map, Y: Set) => Z

module F = (@functorAttr A: X, B: Y) => A
include (@functorAttr X: Map, Y: Set) => Z
include (
  @functorAttr X: Map,
  Y: Set,
  Z: SuperLongModuleTypeName,
  Foo: Baaaaaaaaar,
) => Z
include (@functorAttr2 @functorAttr X: Map, @attr3 Y: Set) => Z
include (
  @functorAttr2 @functorAttr X: Map,
  @attr3 Y: Set,
) => Zzzzzzzzzzzzzzzzzzz

module Make = (A: X, B: Y) => {
  let a = A.a + B.b
}
// constraint on return type
module Make = (A: X, B: Y): Set => {
  let a = A.a + B.b
}
include (
  @functorAttr X: Map,
  Y: Set,
  Z: SuperLongModuleTypeName,
  Foo: Baaaaaaaaar,
): Set => {
  let a = A.a + B.b
}
// with attributes
module Make = (@functorAttr A: X, B: Y): Set => {
  let a = A.a + B.b
}
module Make = (@functorAttr A: X, @functorAttr2 B: Y): Set => {
  let a = A.a + B.b
}

module F = () => Map
module F = @functorAttr () => Map
include () => Map
include @functorAttr () => Map

module Make = (
  Cmp: {
    type t
    let eq: (t, t) => bool
  },
): {
  type key = Cmp.t
  type coll
  let empty: coll
  let add: (coll, key) => coll
} => {
  open Cmp
  type key = t
  type coll = list<key>
  let empty = list[]
  let add = (y: coll, e: key) =>
    if List.exists(x => eq(x, e), y) {
      y
    } else {
      list[e, ...y]
    }
}

module Make = (A: X, B: Y): ((Set, Set) => Set) => {
  let a = A.a + B.b
}
module Make = (
  SuperLongNaaaaaaaame: X,
  SuperLongNaaaaaaaame: Y,
  SuperLongNaaaaaaaame: Z,
): (
  (
    Seeeeeeeeeeeeeeeeeeeeeeeeeeeeet,
    Seeeeeeeeeeeeeeeeeeeeeeeeeeeeet,
    Seeeeeeeeeeeeeeeeeeeeeeeeeeeeet,
  ) => Set
) => {
  let a = A.a + B.b
}

"
`;

exports[`structure.js 1`] = `
"module StringArray = {
  type t = array<string>
  
  let empty = []
}

"
`;

exports[`unpack.js 1`] = `
"module Device = unpack({
  let deviceName = parseCmdline()
  try Hashtbl.find(devices, deviceName) catch {
  | Not_found => exit(2)
  }
})

module Device = unpack({
  let deviceName = parseCmdline()
  try Hashtbl.find(devices, deviceName) catch {
  | Not_found => exit(2)
  }
}: Device)

let draw_using_device = (device_name, picture) => {
  module Device = unpack(
    Hashtbl.find(
      devices,
      device_name,
      test1,
      test2,
      test3,
      test4,
      test5,
      test6,
    ): DEVICEEEEEEEEEEEEEEEEEEEE
  )
  Device.draw(picture)
}

module New_three = unpack(three: X_int)

let to_int = m => {
  module M = unpack(m: X_int)
  M.x
}

"
`;
