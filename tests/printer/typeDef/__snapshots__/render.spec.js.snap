// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`abstract.js 1`] = `
"type t

type t<'a, 'b>

type t = string
type t = @attr string
type t = private string
type t = private @attr string
type t = Module.Long.With.Very.VeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeryLongName.t
type t = private Module.Long.With.Very.VeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeryLongName.t

type t<
  'superlongthing,
  'superlongthing,
  'superlongthing,
  'superlongthing,
  'superlongthing,
> = string
type t<
  'superlongthing,
  'superlongthing,
  'superlongthing,
  'superlongthing,
  'superlongthing,
> = Module.Long.With.Very.VeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeryLongName.t

type t<
  'superlongthing,
  'superlongthing,
  'superlongthing,
  'superlongthing,
  'superlongthing,
> = Module.Long.With.Very.VeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeryLongName.t
  constraint 't = ('s, 'a) => 'sub

type t = 't constraint 't = ('s, 'a) => 'sub

"
`;

exports[`attributes.js 1`] = `
"@attr type t = float
@attr
type t = float

@attr @attr @attr @attr @attr @attr @attr @attr @attr @attr @attr @attr
type t = int
@attr @attr @attr @attr @attr @attr @attr @attr @attr @attr @attr @attr
type t = int

@attrWithSuperLongIdentifeirName
@attrWithSuperLongIdentifeirName
@attrWithSuperLongIdentifeirName
@attrWithSuperLongIdentifeirName
type t = string
@attrWithSuperLongIdentifeirName
@attrWithSuperLongIdentifeirName
@attrWithSuperLongIdentifeirName
@attrWithSuperLongIdentifeirName
type t = string

"
`;

exports[`constraint.js 1`] = `
"type t = Reducer constraint 't = @attr ('state, 'action) => 'nextSubtree

"
`;

exports[`open.js 1`] = `
"type t = ..
type t = private ..
type t<'a, 'b> = ..
type t<'a, 'b> = private ..

type t = .. constraint 't = ('s, 'a) => 'sub

"
`;

exports[`record.js 1`] = `
"type user = {name: string, age: int}
type result<'success, 'failure> = {ok: 'success, fail: 'failure}
type result<
  'success1,
  'failure1,
  'success2,
  'failure2,
  'success3,
  'failure3,
> = {ok: 'success1, fail: 'failure2}

type user = {
  name: string,
  age: int,
  a: string,
  lot: string,
  more: string,
  fields: string,
}
type user<
  'lotsOfTypeVars,
  'lotsOfTypeVars2,
  'lotsOfTypeVars3,
  'lotsOfTypeVars4,
> = {
  name: string,
  age: int,
  a: string,
  lot: string,
  more: string,
  fields: string,
}

type user = {
  name: string,
  age: int,
}

type result<'good, 'bad> = {good: 'good, bad: 'bad}
  constraint 'good = boolean constraint 'bad = float

type user = {
  name: 't,
  age: int,
} constraint 't = string

type t = private {name: string, age: int}
type t = private {
  name: string,
  age: int,
}

type t = User.t = private {name: string, age: int}
type t = @attr User.t = private {name: string, age: int}
type t = User.t = private {
  name: string,
  age: int,
}

type user = {
  @attr name: string,
  @attr age: int,
  @attrAbove
  isAdmin: bool,
  @attrAbove
  hairStyle: Hair.t,
}

type user = {
  @attr @attr @attr @attr @attr @attr @attr @attr @attr @attr @attr @attr
  name: string,
  @attr age: int,
  @attrAbove @attrAbove @attrAbove @attrAbove @attrAbove @attrAbove @attrAbove
  isAdmin: bool,
  @attrAbove
  @attrSuperLongNaaaaaaaaaaaaaaameSooooooooLong
  @attrSuperLongNaaaaaaaaaaaaaaameSooooooooLong
  hairStyle: Hair.t,
  @attrAbove
  @attrSuperLongNaaaaaaaaaaaaaaameSooooooooLong
  @attrSuperLongNaaaaaaaaaaaaaaameSooooooooLong
  hairStyle: Hair.t,
}

"
`;

exports[`typeParams.js 1`] = `
"type t<'a, 'b>
type t<+'a, -'b>

type t<
  'superlongthing,
  'superlongthing,
  'superlongthing,
  'superlongthing,
  'superlongthing,
>

type t<
  +'superlongthing,
  -'superlongthing,
  +'superlongthing,
  -'superlongthing,
  +'superlongthing,
>

type t<
  +'superlongthing,
  -'superlongthing,
  +'superlongthing,
  -'superlongthing,
  +'superlongthing,
> constraint 't = ('state, 'action) => 'nextSubtree

"
`;

exports[`variant.js 1`] = `
"type color = Red | Blue
type color =
  | Red
  | Blue
  | SuperLongColoooooooooourName
  | AnotherSuuuuuuuuuperLongName

type color = private Red | Blue
type color =
  private
  | Red
  | Blue
  | Green
type color =
  private
  | Red
  | Blue
  | SuperLongColoooooooooourName
  | AnotherSuuuuuuuuuperLongName

type color = Colour.t = private Red | Blue
type color = Colour.t =
  private
  | Red
  | Blue
  | Green
type color = Colour.t =
  private
  | Red
  | Blue
  | SuperLongColoooooooooourName
  | AnotherSuuuuuuuuuperLongName

type color = Red: color | Blue: color
type color =
  | Red: color
  | Blue: color
  | SuperLongColoooooooooourName: color
  | AnotherSuuuuuuuuuperLongName: color

type color = Rgb(float, float, float) | Hex(int)
type color =
  | Rgb(
      superLongTypeName,
      superLongTypeName,
      superLongTypeName,
      superLongTypeName,
    )
  | Hex(
      superLongTypeName,
      superLongTypeName,
      superLongTypeName,
      superLongTypeName,
    )

type node<_, 'value> =
  | Root({
      mutable value: 'value,
      mutable updatedTime: float,
    }): node<root, 'value>
  | Derived({
      mutable cachedValue: 'value,
      parent: node<_, 'value>,
      root: node<root, 'value>,
      updateF: 'value => 'value,
      mutable updatedTime: float,
    }): node<derived, 'value>

type t<'a> =
  | AutoDisposing('a => unit, option<exn> => unit, ref<bool>)
  | Delegating(
      'ctx,
      t<'b>,
      ('ctx, t<'b>, 'a) => unit,
      ('ctx, t<'b>, option<exn>) => unit,
      ref<bool>,
    ): t<'a>

type t<'a> =
  | AutoDisposing('a => unit, option<exn> => unit, ref<bool>)
  | Delegating(
      'ctx,
      t<'b>,
      ('ctx, t<'b>, 'a) => unit,
      ('ctx, t<'b>, option<exn>) => unit,
      ref<bool>,
    ): t<
      'superLongTypeName,
      'superLongTypeName,
      'superLongTypeName,
      'superLongTypeName,
    >

type jsx<'nature> =
  | Empty: jsx<empty>
  | Cons(elem</'s1, 'a1/, 'sub1>, jsx<'tl>): jsx</('a1, 's1) => 'sub1, 'tl/>

type jsx<'nature> =
  | Empty: jsx<empty>
  | Cons(elem</'s1, 'a1/, 'sub1>, jsx<'tl>): jsxxxxxxxxxxxxxxxxx</
      ('a1, 's1) => 'sub1,
      'tl
    />

type color = Red | Blue constraint 't = string

type result<'good, 'bad> =
  | Good('good)
  | Bad('bad) constraint 'good = boolean constraint 'bad = float

type color =
  | @attr Red
  | @attr Blue

type gadtType<'x> =
  | Foo(int): @onFirstRow gadtType<int>
  | Bar(@onInt int): @onSecondRow gadtType<unit>

type color<'value> =
  | Rgb(
      @attr superLongTypeName,
      @attr superLongTypeName,
      @attr superLongTypeName,
      @attr superLongTypeName,
    ): @toRgb color<float>
  | Hex(
      @attr superLongTypeName,
      @attr superLongTypeName,
      @attr superLongTypeName,
      @attr superLongTypeName,
    ): @toHex color<float>

"
`;
