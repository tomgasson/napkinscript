// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`alias.js 1`] = `
"type t = string as 'x
type t = ((string, float) => unit) as 'x
type t = ((string, float) => unit) as 'x
type t = (string, float) => (unit as 'x)

"
`;

exports[`any.js 1`] = `
"type t = _
type t = node<_>
type t = {name: _}
type t = {name: @attr _}
type t = Plant(_)
type t = Plant(@attr _)
type t = (_, _) => unit
type t = (@attr _, @attr _) => unit
let x: _ = ()
let x: @attr _ = ()
external foo: _ = \\"foo_c_binding\\"
external foo: @attr _ = \\"foo_c_binding\\"

"
`;

exports[`arrow.js 1`] = `
"type t = (string, string) => string
type t = (~firstName: string, ~lastName: string) => string
type t = (~firstName: string=?, ~lastName: string=?) => string
type t = (
  string,
  string,
  superLongIdentifierHere,
  superLongIdentifierHere,
  superLongIdentifierHere,
) => okok
type t = (
  ~firstName: string,
  ~lastName: string,
  ~long: superLongIdentifierHere=?,
  ~long2: superLongIdentifierHere=?,
  ~long3: superLongIdentifierHere=?,
) => string
type t = (
  _,
  typeConstr<'a, state, 'foo>,
  'x as 'y,
  module(S),
  %extension,
) => string
external c_binding: (
  string,
  string,
  superLongIdentifierHere,
  superLongIdentifierHere,
  superLongIdentifierHere,
) => okok = \\"c_binding_external_primitive\\"
external c_binding: (
  ~any: _,
  string,
  ~firstClassModule: module(Hashmap with
    type key = string
    and type value = int
    and type superLongThingHere = definitelyLineBreak
  )=?,
  ~typeConstr: typeConstr<
    superLongIdentifierHere,
    superLongIdentifierHere,
    superLongIdentifierHere,
  >,
  ~subArrow: (
    ~subArrow: 'a1,
    ~subArrowParameter: 'a2,
    ~subArrowParameter3: loooooooongTypExpr,
  ) => /foo, bar, baz/,
  ~subArrow2: (
    ~subArrow: 'a1,
    ~subArrowParameter: 'a2,
    ~subArrowParameter3: loooooooongTypExpr,
  ) => /
    foo,
    bar,
    baz,
    veryLooooooooooooooooongTupleTypeHere,
    veryLooooooooooooooooongTupleTypeHere,
    shoulBreakThatLine
  /,
  ~jsObject: {
    \\"name\\": string,
    \\"otherLongName\\": evenLongerType,
    \\"woooooooooooooo\\": excitingTypeHereBecauseItWillBreakthatLine,
  }=?,
) => okok = \\"c_binding_external_primitive\\"
type t = (
  ~firstName: string,
  ~lastName: string,
) => {
  \\"name\\": string,
  \\"age\\": int,
  \\"moreProps\\": superLongIdentifierHere,
  \\"moreProps2\\": superLongIdentifierHere2,
  \\"moreProps3\\": superLongIdentifierHere3,
  \\"moreProps4\\": superLongIdentifierHere4,
}
type t = (
  ~firstName: string,
  ~lastName: string,
) => /
  name,
  string,
  age,
  int,
  moreProps,
  superLongIdentifierHere,
  moreProps2,
  superLongIdentifierHere2,
  moreProps3,
  superLongIdentifierHere3,
  moreProps4,
  superLongIdentifierHere4
/
type t = (
  ~firstName: string,
  ~lastName: string,
) => typeConstr<
  name,
  string,
  age,
  int,
  moreProps,
  superLongIdentifierHere,
  moreProps2,
  superLongIdentifierHere2,
  moreProps3,
  superLongIdentifierHere3,
  moreProps4,
  superLongIdentifierHere4,
>
type t = (
  ~firstName: string,
  ~lastName: string,
) => module(Hashmap with
  type key = string
  and type value = int
  and type superLongThingHere = definitelyLineBreak
)
type t = (@attr string, @attr float) => unit
type t = (@attr @attr2 string, @attr @attr2 float, @attr3 int) => unit
type t = @attr (string => unit)
type t = @attr (foo, bar, baz) => unit
type t = @attr (foo, @attr2 ~f: bar, @attr3 ~f: baz) => unit
type t = @attr (string => @attr (int => unit))
type t = @attr (string, int) => @attr (int, float) => unit
type t = @attr (int => @attr (int, float) => @attr (unit, unit) => unit)
type t = (@attr @attr2 ~f: int, @attr3 ~g: float) => unit
type f = (
  @attr @attr @attr @attr @attr @attr @attr @attr @attr ~f: superLong,
  @attr2
  @superLongAttributeNameSuperLongsuperLongAttributeName
  @attr2
  @superLongAttributeNameSuperLongsuperLongAttributeName
  ~g: wowwwThisisLonggggg,
  @attr3 ~h: ccccrazysldkfjslkdjflksdjkf=?,
) => unit
type t = @attr (
  stringWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong => @attr2 (
    floatWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong => @attr3 (
      intWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong => unitWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong
    )
  )
)
type t = @attr (
  fooWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
  barWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
  bazWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
) => @attr2 (
  stringWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
  floatWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
) => unit
type t = @attr
@attrWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong
@attrWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong (
  fooWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
  barWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
  bazWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
) => @attr2
@attrWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong
@attrWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong (
  stringWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
  floatWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
) => unit
external debounce: (int, @bs.meth unit) => unit = \\"debounce\\"
external debounce: int => @bs.meth (unit => unit) = \\"debounce\\"
external debounce: (int, @bs.meth (unit => unit)) => @bs.meth (unit => unit) =
  \\"debounce\\"
external debounce: (
  int,
  @bs.meth (unit => unit),
  @bs.meth (unit => unit),
) => @bs.meth (unit => unit) = \\"debounce\\"
external debounce: (
  int,
  @bs.meth (unit => unit),
  @bs.meth (unit => @bs.meth (unit => unit)),
) => @bs.meth (unit => unit) = \\"debounce\\"
type returnTyp = (int, int) => @magic float
type returnTyp = (
  intWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
  intWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
) => @magic float
type returnTyp = (
  intWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
  intWithSuperLongIdentifierNameLoooooooooooooooooooooooooooooooooooooooooooooong,
) => @magic
@magicWithSuperLongIdentiefierNameLoooooooooooooooooooooooong
@magicWithSuperLongIdentiefierNameLoooooooooooooooooooooooong
float
type t = (. int) => int
type t = (. int, int) => int
type t = (. int, . int) => int
type t = (. int, int, . int, int) => int
type t = (. @attr int) => unit
type t = (. @attr int, . @attr2 int) => unit
type t = (
  . @attrOnInt int,
  @attrOnInt int,
  . @attrOnInt int,
  @attrOnInt int,
) => int
type t = (. @attr ~x: int, ~y: int, . @attr ~z: int, @attr ~omega: int) => unit

"
`;

exports[`bsObject.js 1`] = `
"type user = {\\"age\\": int}
type user = {\\"age\\": int, \\"name\\": string}
type user = {
  \\"age\\": int,
  \\"name\\": string,
  \\"moreFields\\": veryVeryVeryLongtype,
  \\"superLongNameThat\\": whyDoesATypeWithThisAmountOfCharactersMakeItIntoThisFile,
  \\"because\\": testingLineBreaks,
}
type magic = {..}
type t = {..\\"age\\": int}
type magicallyLong = {..
  \\"age\\": int,
  \\"name\\": string,
  \\"moreFields\\": veryVeryVeryLongtype,
  \\"superLongNameThat\\": whyDoesATypeWithThisAmountOfCharactersMakeItIntoThisFile,
  \\"because\\": testingLineBreaks,
}
external test: (
  foo,
  bar,
  baz,
) => {..
  \\"age\\": int,
  \\"name\\": string,
  \\"moreFields\\": veryVeryVeryLongtype,
  \\"superLongNameThat\\": whyDoesATypeWithThisAmountOfCharactersMakeItIntoThisFile,
  \\"because\\": testingLineBreaks,
} = \\"primitive\\"
type user = @attr {\\"age\\": @attr int}
type magic = @attr {..}
type t = @attr {..\\"age\\": int}
external test: (
  foo,
  bar,
  baz,
) => @attr {..
  \\"age\\": int,
  \\"name\\": string,
  \\"moreFields\\": veryVeryVeryLongtype,
  \\"superLongNameThat\\": whyDoesATypeWithThisAmountOfCharactersMakeItIntoThisFile,
  \\"because\\": testingLineBreaks,
} = \\"primitive\\"

"
`;

exports[`extension.js 1`] = `
"type t = %extension
type t = @attr %extension
external foo: %extension = \\"primitive\\"
external foo: @attr %extension = \\"primitive\\"
let x: %extension = z
let x: @attr %extension = z

"
`;

exports[`firstClassModule.js 1`] = `
"type t = module(S)
type t = module(Hashmap with type key = string)
type t = module(Hashmap with type key = string and type value = int)
type t = module(Hashmap with
  type key = string
  and type value = int
  and type superLongThingHere = definitelyLineBreak
)
type t = constr<module(S)>
external foo: module(S) = \\"primitive\\"
let x: module(S) = y
let x: module(Hashmap with
  type key = string
  and type value = int
  and type superLongThingHere = definitelyLineBreak
) = y
type toValueLikeInstance = t<'a> => module(RxValueLikeInstance.S with
  type a = 'a
)
type t<'a> = module(Test with type a = 'a)
type t = ref<module(Console)>
let devices: Hastbl.t<string, module(DEVICE)> = xyz
type t = @attr module(S)
external foo: @attr module(S) = \\"primitive\\"
let devices: @attr Hastbl.t<string, module(DEVICE)> = xyz

"
`;

exports[`polyTyp.js 1`] = `
"external getLogger: unit => {
  \\"log\\": 'a => unit,
  \\"log2\\": 'a. int => int,
  \\"log3\\": 'a 'b. ('a, 'b) => int,
} = \\"./src/logger.mock.js\\"
type reducer<'state> = {
  state: @attr 'state,
  send: 'action. @attr ('state, 'action) => 'action,
}

"
`;

exports[`tuple.js 1`] = `
"type t = /string, int, float/
type t = /
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak
/
type t = constr</string, int, float/>
type t = constr</
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak
/>
external foo: /string, int, float/ = \\"external_binding\\"
external foo: /
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak
/ = \\"external_binding\\"
let x: /int, int/ = /1, 2/
let x: /
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak,
  superLongTypeNameThatWillBreak
/ = /1, 2/
type t = @attr /@attr string, @attr int, @attr float/

"
`;

exports[`typeConstr.js 1`] = `
"type t = Option.t<string>
type t = Mod.Sub.t<a, b, c>
type t = Mod.Sub.t<
  soooooLoooooong,
  soooooLoooooong,
  soooooLoooooong,
  soooooLoooooong,
  soooooLoooooong,
  soooooLoooooong,
  b,
  c,
>
type t = Mod.Sub.t<
  Mod.Sub.t<soooooLoooooong, soooooLoooooong, soooooLoooooong>,
  soooooLoooooong,
  soooooLoooooong,
  soooooLoooooong,
  b,
  c,
>
type t = Mod.Sub.t<
  Mod.Sub.t<
    soooooLoooooong,
    soooooLoooooong,
    soooooLoooooong,
    soooooLoooooong,
    soooooLoooooong,
  >,
  Nested.Module.t<string, float>,
  soooooLoooooong,
  soooooLoooooong,
  b,
  c,
>
let t: list<{\\"age\\": int}> = x
let t: list<{
  \\"age\\": int,
  \\"name\\": string,
  \\"moreFields\\": veryVeryVeryLongtype,
  \\"superLongNameThat\\": whyDoesATypeWithThisAmountOfCharactersMakeItIntoThisFile,
  \\"because\\": testingLineBreaks,
}> = x
let t: list<
  {\\"age\\": int, \\"name\\": string},
  {\\"name\\": string, \\"age\\": int},
  {\\"name\\": string, \\"age\\": int},
> = x
type t = Option.t</tupleTyp1, tupleTyp2, tupleTyp3/>
type t = Option.t</
  tupleTyp1,
  tupleTyp2,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3
/>
let t: Option.t</
  tupleTyp1,
  tupleTyp2,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3,
  tupleTyp3
/> = x
type t = @attrs Option.t<string>
let t: @attrs list<{\\"age\\": int}> = x
external color: @attr colour<'t> = \\"c_color\\"

"
`;

exports[`var.js 1`] = `
"type t = 'a
type t = @attr 'a
type t = constr<'a>
external foo: 'foo = \\"primitive\\"
external foo: @attr 'foo = \\"primitive\\"
let x: 'a = y
let x: @attr 'a = y

"
`;
