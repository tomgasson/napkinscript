// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StaticReactTypes.js 1`] = `
"type empty = Empty_
/*
 * Also create another form for splicing in nodes into otherwise fixed length
 * sets.
 */
type elem<'t> =
  | Empty: elem<empty>
  | Element(renderable<('s, 'a) => 'sub>): elem<('s, 'a) => 'sub>
  | TwoElements(elem<'t1>, elem<'t2>): elem<('t1, 't2)>
  /*
   * Not an ordered map yet, but should be.
   */
  | ElementMap(list<elem<'t>>): elem<list<'t>>
/**
 * Instance subtree. Mirrors the shape of JSX, instead of just being a List.
 */
and subtree<'t> =
  | EmptyInstance: subtree<empty>
  | Instance(inst<('s, 'a) => 'sub>): subtree<('s, 'a) => 'sub>
  /* Having TwoInstances mirror the fact that TwoElements requires sub
   * elements, was probably overkill. */
  | TwoInstances(subtree<'t1>, subtree<'t2>): subtree<('t1, 't2)>
  | InstanceMap(list<subtree<'t>>): subtree<list<'t>>
and reducer<'t> = (inst<'t>, 'a) => 's constraint 't = ('s, 'a) => 'sub
/*
 * These are just convenient shortcuts to specifiying the entire spec.  It just
 * makes it so you don't have to do a spread onto a record, since in
 * static-by-default trees, you don't need to define a record beforehand.
 */
and componentSpec<'t> =
  /* Add more forms here for convenience */
  | Reducer('s, elem<'sub>, reducer<'t>) constraint 't = ('s, 'a) => 'sub
and self<'t> = {
  reduceEvent: 'e. ('e => 'a, 'e) => unit,
  /**
   * Implements the ability to cause your node to be swapped out from within
   * its tree. Not purely functional by design. This is for things like
   * external subscriptions that don't arive via propagations through the tree.
   * However, this is better than simple naive mutation. That's because this
   * \\"out of nowhere\\" operation notifies the root of the tree that it should
   * perform a mutation. That allows the root to create an entirely new
   * reference, leaving the previous tree completely in tact! There isn't a
   * single mutable reference cell in the entire tree - only the root node is
   * mutable, and even then it doesn't have to be.
   *
   * This Api takes highly imperative operations like request animation frame,
   * and allows them to work well with what would otherwise be a purely
   * functional data structure (aside from the side effects caused by
   * subscribing upon mount etc).
   */
  send: 'a => unit,
} constraint 't = ('s, 'a) => 'sub
/**
 * The result of applying props. Now the result is a function that just waits
 * for React to supply the state, and in turn returns the componentSpec.
 */
and renderable<'t> = (~state: 's=?, self<'t>) => componentSpec<'t>
  constraint 't = ('s, 'a) => 'sub
/*
 * TODO: Can store the subreplacer in the instance so we don't need to
 * recompute it every time.
 */
and inst<'t> = {
  /* Memoized just for performance */
  replacer: replacer<'t>,
  /* Memoized just for performance */
  subreplacer: subreplacer<'sub>,
  self: self<'t>,
  renderable: renderable<'t>,
  spec: componentSpec<'t>,
  subtree: subtree<'sub>,
} constraint 't = ('s, 'a) => 'sub
/*
 * A series of chained functions that forms a fishing line that each component
 * has a handle to. When invoked it can cause its own individual instance node
 * in the tree to be replaced in the *root* tree that it exists in! This is
 * totally type safe, and requires no dynamic casts, and no searching through
 * the tree.
 */
/* Make it even more generalized on action than necessary to avoid GADT
 * errors. */
and replacer<'t> = (inst<'t> => inst<'t>) => unit
  constraint 't = ('s, 'a) => 'sub
and subreplacer<'sub> = (subtree<'sub> => subtree<'sub>) => unit

"
`;

exports[`case.js 1`] = `
"let printExprFunParameters = (~uncurried, parameters) =>
  switch parameters {
  | list[([], Asttypes.Nolabel, None, {Parsetree.ppat_desc: Ppat_any})]
    when !uncurried =>
    Doc.text(\\"_\\")
  | list[(
      [],
      Asttypes.Nolabel,
      None,
      {Parsetree.ppat_desc: Ppat_var(stringLoc)},
    )] when !uncurried =>
    Doc.text(stringLoc.txt)
  | list[(
      [],
      Nolabel,
      None,
      {ppat_desc: Ppat_construct({txt: Longident.Lident(\\"()\\")}, None)},
    )] when !uncurried =>
    Doc.text(\\"()\\")
  | parameters =>
    let lparen = if uncurried {
      Doc.text(\\"(. \\")
    } else {
      Doc.lparen
    }
    let shouldHug = ParsetreeViewer.parametersShouldHug(parameters)
    let printedParamaters = Doc.concat(list[
      if shouldHug {
        Doc.nil
      } else {
        Doc.softLine
      },
      Doc.join(
        ~sep=Doc.concat(list[Doc.comma, Doc.line]),
        List.map(printExpFunParameter, parameters),
      ),
    ])
    Doc.group(
      Doc.concat(list[
        lparen,
        if shouldHug {
          printedParamaters
        } else {
          Doc.indent(printedParamaters)
        },
        if shouldHug {
          Doc.nil
        } else {
          Doc.concat(list[Doc.trailingComma, Doc.softLine])
        },
        Doc.rparen,
      ]),
    )
  }

let isHuggableExpression = expr =>
  switch expr.pexp_desc {
  | Pexp_array(_)
  | Pexp_tuple(_)
  | Pexp_construct({txt: Longident.Lident(\\"::\\")}, _)
  | Pexp_construct({txt: Longident.Lident(\\"[]\\")}, _)
  | Pexp_extension({txt: \\"bs.obj\\"}, _)
  | Pexp_record(_) => true
  | _ => false
  }

switch colour {
| (Red | Blue)
| ((Green | Purple) | Rosa)
| (Black | White)
| AnotherColoooooour => x
}

let precedence = x =>
  switch x {
  | HashEqual | ColonEqual => 1
  | Lor => 2
  | Land => 3
  | Equal
  | EqualEqual
  | EqualEqualEqual
  | LessThan
  | GreaterThan
  | BangEqual
  | BangEqualEqual
  | LessEqual
  | GreaterEqual
  | BarGreater => 4
  | Plus | PlusDot | Minus | MinusDot | PlusPlus => 5
  | Asterisk | AsteriskDot | Forwardslash | ForwardslashDot => 6
  | Exponentiation => 7
  | Hash | HashHash | MinusGreater => 8
  | Dot => 9
  | _ => 0
  }

"
`;

exports[`char.js 1`] = `
"let x = 'a'
let x = '\\\\\\\\'
let x = '\\"'
let x = '\\\\''
let x = '\\\\n'
let x = '\\\\t'
let x = '\\\\b'
let x = '\\\\r'
let x = ' '
let x = '\\\\017'
let x = '\\\\170'
let x = '\\\\179'

"
`;

exports[`lor.js 1`] = `
"let lower = ch => lor(32, ch)

"
`;

exports[`number.js 1`] = `
"let x = 0b0000_0001

let int32 = 42l
let int64 = 42L
let nativeint = 42n

let x = -44.20e99
let x = -44.20_34e99
let x = -44.20e+9
let x = -44.20e-9
let x = -44.20e-99_99
let x = -444_444.20e99
let x = 44.20e99
let x = 44.20_34e99
let x = 44.20e+9
let x = 44.20e-9
let x = 44.20e-99_99
let x = 44e99
let x = 44_44e99

let x = 0x0
let x = 0X0

let x = 0xAA
let x = 0XA_A
let x = 0xAA.ff
let x = 0xAA.ff_ff
let x = 0xAA.ff_ffp10
let x = 0xAA.ff_ffp+10
let x = 0xAA.ff_ffp-10
let x = 0xAA.ff_ffp100_00
let x = 0xAA.ff_ffp+100_00
let x = 0xAA.ff_ffp-100_00

"
`;

exports[`string.js 1`] = `
"let s = \\"a string with \\\\b \\\\n \\\\r \\\\t abcdef\\"

let s = \\"ðŸš€ ðŸ¤­ ðŸ”¥ ðŸ˜€ with emojis ðŸ˜… ðŸ‘Œ test ðŸ‘€\\"

let s = \\"a \\\\\\"string inside\\\\\\" a string\\"

let s = \\"a double escaped \\\\\\\\ test\\"

let s = \\"what happens here \\\\\\\\n\\"

"
`;
