// Pexp_ident
let pi = /* before */ Math.pi // after

// Pexp_constant
let one = /* before */ 1 // after

// Pexp_let
let x = {
  let /* before a */ a /* after a */ = /* before 1 */ 1 // after 1
  /* before ident */ Pexp.ident /* after ident */
}

let x = {
  let /* before a */ a /* after a */ = /* before 1 */ 1 // after 1
  let /* before b */ b /* after b */ = /* before 2 */ 2 // after 2
  /* before ident */ Pexp.ident /* after ident */
}

let x = {
  let /* before a */ a /* after a */ = /* before 1 */ 1 // after 1
  let /* before b */ b /* after b */ = /* before 2 */ 2 // after 2
  /* before const */ "a string" /* after const */
}

// Pexp_extension
let x = /* c0 */ %ext(/* before */ "test" /* after */) /* c1 */

// Pexp_open
let x = {
  /* before open */ open /* c0 */ Belt /* c1 */ // after open
  /* before const */ "a string" /* after const */
}

let x = {
  /* before open */ open /* c0 */ Belt /* c1 */ // after open
  /* before open */ open! /* c0 */ Unsafe /* c1 */ // after open
  /* before const */ "a string" /* after const */
}

let x = {
  /* before let */ let a = 1 // after let
  open /* before ident */ Belt // after open
  /* before const */ "test" /* after const */
}

let x = {
  open /* before ident */ Belt // after open
  /* before let */ let a = 1 // after let
  /* before const */ "test" /* after const */
}

// Pexp_letexception
let x = {
  /* before */ exception /* c0 */ Foo /* c1 */ // after
  /* before */ "test" /* after */
}

// Pexp_letmodule
let x = {
  /* before */ module /* c0 */ B /* c1 */ = Belt // after
  /* before */ "test" /* after */
}

// Pexp_assert
let x = /* here */ assert /* c0 */ true /* c1 */

// Pexp_lazy
let x = /* here */ lazy /* c0 */ true /* c1 */

// Pexp_constraint
let x = (/* c0 */ "string" /* c1 */: /* c2 */ string /* c3 */) // after

// Pexp_construct
let x = /* before */ true /* after */
let x = /* before */ Red /* after */
let x = /* before */ Red(/* c0 */ shade /* c1 */) /* after */
let x = /* before */ Red /* after Red */(/* c0 */ r /* c1 */, /* c2 */ g /* c3 */, /* c4 */ b /* c5 */) /* after */

// Pexp_array
let x = [/* c0 */ a /* c1 */, /* c2 */ b /* c3 */, /* c4 */ c /* c5 */]
let x = [/* a */]
let x = [
// test
]

// Pexp_record
let user = /* before */ {
  // above name
  /* c0 */ name /* c1 */ : /* c2 */ "Steve" /* c3 */,
  // above age
  /* c4 */ age /* c5 */ : /* c6 */ 31 /* c7 */,
} // after

let spreadUser = {/* before */ ...user1 /* after */, /* c0 */age /*c1 */: /* c2 */ 32 /* c3 */
}

// Pexp_field
let x = /* before */ user /* c0 */. /* c1 */ name /* c2 */

// Pexp_setfield
/* before */ user /* c0 */. /* c1 */ name /* c2 */ = /* c3 */ "Steve" /* c4 */

// Pexp_ifthenelse
if /* c0 */ user.name === "Steve" /* c1 */ {
  /* c2 */ Js.log("It's Steve") /* c3 */
} // trailing

if /* c0 */ user.name === "John" /* c1 */ {
  /* c2 */ Js.log("It's Johnâ€¦") /* c3 */
} else {
  // c4
  /* c5 */ Js.log("we need John") /* c6 */
} // trailing

// 
